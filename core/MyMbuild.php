<?php 
/*
   File: MyMbuild.php | (c) Giovanni Sileno 2006, 2007
   Distributed as part of "MyM - avant CMS"
   -----------------------------------------------------------------
   This file is part of MyM.

   MyM is free software; you can redistribute it and/or modify
   it under the terms of the GNU Lesser General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   MyM is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU Lesser General Public License for more details.
   
   You should have received a copy of the GNU Lesser General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.
   -----------------------------------------------------------------
   This file builds the compiled versions for the structures.
*/

trace(1, "core | MyMbuild > included");

MyMinclude("/core/MyMtype");
MyMinclude("/core/MyMelement");

// build
// put the input in a global string as a line (add a \n at the end)
function build($string = "") {
  global $buildstring, $nested;
  
  // build spaces 
  if (!isset($nested)) {
    $nested = 0;
  }
  
  // print($nested);
  $spaces = "";
  for ($i = 0; $i < $nested; $i++)
    $spaces .= "  ";
  
  // insert spaces
  $string = $spaces . $string;
  
  // to standard output
  if (!isset($buildstring)) {
    $string = str_replace("<", "&lt;", $string);
    $string = str_replace(">", "&gt;", $string);
    print($string."\n");
  }
  // to string
  else
    $buildstring .= $string."\n";

}

// nl
// add an empty line to the global build string
function nl() {
  build();
}

// up
function up() {
  global $nested;
  $nested++;
}

// down
function down() {
  global $nested;
  $nested--;
}

// buildtrace
function buildtrace($string = "") {
  if (MYM_BUILD_TRACE)
    build($string);
}

class MyMbuild extends MyMelement
{

   // buildHead
   function buildHead() {
     build('<?php');up();
     build('// file: '.$this->db.'.php');
     build('// this file has been generated by MyM.');
     build('// -----------------------------------------------------------------');
     build('// this file is a module: custom class for handling '.$this->db.' elements');down();nl();
     
     build('MyMincludestructure("'.$this->db.'");');
     nl(); 
   }

   // buildClassHead
   function buildClassHead() {
     
     build('// Module class for '.$this->db.' elements');
     build('class mod'.capitalize($this->db).' extends '.capitalize($this->db).' {');up();nl();
   }

   // buildClassEnd
   function buildClassEnd() {
     down(); build('}'); nl(); 
   }

   // buildEnd
   function buildEnd() {
     build('?>');
   }

   // buildBasicPrintItem()
   function buildBasicPrintItem($key = UNDEFINED, $rule = NULL) {     
        
     if ($key == UNDEFINED)     
       tracedie("<p><strong>Error</strong> key $key undefined.</p>");
        
     if ($key != 'db' && $key != 'id') {
       $type = $rule->type;
             
       if (($rule->readpriv) != false) {
         build('if ($priv >= '.$rule->readpriv.') {');up();
       }
       
       switch ($type) {
         case _MYMTEXT:           
           build('$'.$key.'output = MYMprocess($this->'.$key.');');
           break;
 
         case _TEXT:
           if ($rule->starred)
             build('$'.$key.'output = "...shh!! :)";');
           else
             build('$'.$key.'output = MyMbasicprocess($this->'.$key.');');
		   break;         

         case _LONGTEXT: 
             build('$'.$key.'output = MyMbasicprocess($this->'.$key.');');        
           break;
 
         case _FILE:
           build('$file = ROOT_URI."/".MYM_UPLOAD_PATH."/".$this->'.$key.';');
           build('if (file_exists(MYM_UPLOAD_REALPATH."/".$this->'.$key.'))');up();
           build('$'.$key.'output .= "( <a href=\'$file\'>Download $this->name</a> )";');down();
           build('else');up();
           build('$'.$key.'output = "(<em>Sorry, here there was a file - not valid filename.</em>)";');down();
           break;
           
         case _VIDEO:
           build('$file = ROOT_URI."/".MYM_UPLOAD_PATH."/".$this->'.$key.';');
	   build('if (file_exists(MYM_UPLOAD_REALPATH."/".$this->'.$key.')) {');up();
           build('$'.$key.'output .= "<a href=\'http://www.macromedia.com/go/getflashplayer\'>Get the Flash Player</a> to see this player.\n";');
           build('$'.$key.'output .= "<script type=\'text/javascript\'>\n";');
           build('$'.$key.'output .= "var FO = {	movie:\'".MYM_RELATIVE_PATH."/ext/flashflvplayer/flvplayer.swf\',width:\'240\',height:\'140\',majorversion:\'7\',build:\'0\',bgcolor:\'#FFFFFF\',\n";');
           build('$'.$key.'output .= "   flashvars:\'file=$value&showdigits=false&autostart=false&showfsbutton=true\' };\n";');
           build('$'.$key.'output .= "   UFO.create(	FO, \'player'.$key.'\');\n";');
           build('$'.$key.'output .= "</script>\n";');
           down();build('}');
           build('else');up();
           build('$'.$key.'output = "(<em>Sorry, here there was a video - not valid filename.</em>)";');down();
           break;
 
         case _AUDIO:
           build('$file = ROOT_URI."/".MYM_UPLOAD_PATH."/".$this->'.$key.';');
	   build('if (file_exists(MYM_UPLOAD_REALPATH."/".$this->'.$key.')) {');up();
           build('$'.$key.'output .= "<object type=\'application/x-shockwave-flash\' data=\'./ext/dewplayer/dewplayer.swf?son=$file\' width=\'200\' height=\'20\'>\n";');
           build('$'.$key.'output .= "<param name=\'movie\' value=\'".MYM_RELATIVE_PATH."/ext/dewplayer/dewplayer.swf?son=$file\' /></object>  &raquo;&raquo; ".$value." \n";');
           down(); build('}');
           build('else');up();
           build('$'.$key.'output = "(<em>Sorry, here there was an audio object - not valid filename.</em>)";');down();
           break;
            
         case _IMAGE:
           build('$file = $this->filename("'.$key.'");');
           build('$thumb =  $this->thumb_filename("'.$key.'");');
           build('$max = $this->resized_filename("'.$key.'");');
           build('if ($thumb) {');up();
           build('$'.$key.'output .= "<a href=\'$file\'><img src=\'$thumb\' /></a>\n";');
           down(); build('}');
           build('else'); up();
           build('$'.$key.'output .= "(<em>Sorry, here there was an image - not valid filename.</em>)";');down();
           break;
 
         case _OWNER:
         case _ID:
           if ($rule->db == UNDEFINED || $rule->what == UNDEFINED)
             build('$'.$key.'output = $this->'.$key.';');
           else {
               build('if ($mysql) {');up();
               build('$key = keyRead(\''.$rule->db.'\', \''.$rule->what.'\', $value);');
               build('$'.$key.'output = "<a href=\'index.php?o='.$rule->db.'&id=".$this->'.$key.'."\'>$key</a>";');
	       down(); build('} else { ');up();
               build('$'.$key.'output = $this->'.$key.';');
	       down(); build('}');
           }
           break;           
 
         case _FLAG:      
           build('$'.$key.'output = $this->flagarray_index("'.$key.'", $this->'.$key.');');
           break;
 
         case _LNG:
         case _EMAIL:
         case _NUMBER:
         case _ONDB:
         case _OWNERIP:
         case _PRIV:
         case _ONID:
         case _LISTID:
         case _DATE:
         case _NOW:
           build('$'.$key.'output = $this->'.$key.';');
           break;             
       }
       
       if (($rule->readpriv) != false) {
         down();build('} ');
       }
       
     }
   }

   // buildPrintItem()
   function buildPrintItem($key = UNDEFINED, $rule = NULL) {

     if ($key == UNDEFINED)     
       tracedie("<p><strong>Error</strong> key $key undefined.</p>");
        
     if ($key != 'db' && $key != 'id') {
       $type = $rule->type;
             
       if (($rule->readpriv) != false) {
         build('if ($priv >= '.$rule->readpriv.') {');up();
       }
                 
       switch ($type) {
         case _MYMTEXT:          
           // build('MyMinclude("/core/MyMprocess.php");');
           build('$'.$key.'output = "<td class=\'left\'>'.$key.'</td> <td class=\'right\'>".MyMprocess($this->'.$key.')."</td>";');
           break;
 
         case _TEXT:      
           if ($rule->starred)
             $value = '<em>...shh!!! :)</em>';
           else {
             // build('MyMinclude("/core/MyMprocess.php");');
             $value = '".MyMbasicprocess($this->'.$key.')."';
           }
           
           build('$'.$key.'output = "<td class=\'left\'>'.$key.'</td> <td class=\'right\'>'.$value.'</td>";');           
           break; 
        
         case _LONGTEXT:  
           // build('MyMinclude("/core/MyMprocess.php");');
           build('$'.$key.'output = "<td class=\'left\'>'.$key.'</td> <td class=\'right\'>".MyMbasicprocess($this->'.$key.')." </td>";');
           break; 
         
         case _FILE:
           build('$file = MYM_UPLOAD_REALPATH."/".$this->'.$key.';');
           build('$'.$key.'output = "<td class=\'left\'>'.$key.'</td>\n";');
           build('if (is_file($file))');up();
           build('$'.$key.'output .= "<td class=\'right\'>".$this->'.$key.';');
           build('$'.$key.'output .= "( <a href=\'$file\'>Download</a> )";');
           build('$'.$key.'output .="</td>";');down();
           build('else');up();
           build('$'.$key.'output .= "<td class=\'error\'><strong>Error</strong> Not valid filename (".$this->'.$key.'.").</td>";');down();
           build('$'.$key.'output .= "\n";');
           break;
           
         case _VIDEO:
           build('$file = MYM_UPLOAD_REALPATH."/".$this->'.$key.';');
           build('$'.$key.'output = "<td class=\'left\'>'.$key.'</td>\n";');
           build('if (is_file($file)) {');up();
           build('$'.$key.'output .= "<td class=\'right\'>";');
           build('$'.$key.'output .= "<td id=\'player'.$key.'\'><a href=\'http://www.macromedia.com/go/getflashplayer\'>Get the Flash Player</a> to see this player.</td>\n";');
           build('$'.$key.'output .= "<script type=\'text/javascript\'>\n";');
           build('$'.$key.'output .= "var FO = {	movie:\'".MYM_RELATIVE_PATH."/ext/flashflvplayer/flvplayer.swf\',width:\'240\',height:\'140\',majorversion:\'7\',build:\'0\',bgcolor:\'#FFFFFF\',\n";');
           build('$'.$key.'output .= "   flashvars:\'file=$this->'.$key.'&showdigits=false&autostart=false&showfsbutton=true\' };\n";');
           build('$'.$key.'output .= "   UFO.create(	FO, \'player'.$key.'\');\n";');
           build('$'.$key.'output .= "</script>\n";');
           build('$'.$key.'output .= "</td>";');down();
           build('}');
           build('else');up();
           build('$'.$key.'output .= "<td class=\'error\'><strong>Error</strong> Not valid filename (".$this->'.$key.'.").</td>";');down();
           build('$'.$key.'output .= "\n";');
           break;
 
         case _AUDIO:
           build('$file = MYM_UPLOAD_REALPATH."/".this->'.$key.';');
           build('$'.$key.'output = "<td class=\'left\'>'.$key.'</td>\n";');
           build('if (is_file($file)) {');up();
           build('$'.$key.'output .= "<td class=\'right\'>";');
           build('$'.$key.'output .= "<object type=\'application/x-shockwave-flash\' data=\'./ext/dewplayer/dewplayer.swf?son=$file\' width=\'200\' height=\'20\'>\n";');
           build('$'.$key.'output .= "<param name=\'movie\' value=\'".MYM_RELATIVE_PATH."/ext/dewplayer/dewplayer.swf?son=$file\' /></object>  &raquo;&raquo; ".$this->'.$key.'." \n";');
           build('$'.$key.'output .="</td>";');down();
           build('}');
           build('else');up();
           build('$'.$key.'output .= "<td class=\'error\'><strong>Error</strong> Not valid filename (".$this->'.$key.'.").</td>";');down();
           build('$'.$key.'output .= "\n";');
           break;
            
         case _IMAGE:
           build('$file = MYM_UPLOAD_REALPATH."/".this->'.$key.';');
           build('$thumb = MYM_UPLOAD_REALPATH."/thumb_".$this->'.$key.';');
           build('$max = MYM_UPLOAD_REALPATH."/resized_".$this->'.$key.';');
           build('$'.$key.'output .= "<tr><td class=\'left\'>'.$key.'</td>\n";');
           build('if (is_file($file)) {');up();
           build('list($width, $height) = getimagesize($file);');
           build('$'.$key.'output .= "<td class=\'right\'>";');
           build('if (is_file($thumb))');up();
           build('$'.$key.'output .= "<a href=\'$file\'><img src=\'$thumb\' /></a> <br/>&raquo;&raquo; ".$this->'.$key.'." - ".$width."x".$height."px (thumbnail)\n";');down();
           build('else if (is_file($max))');up();
           build('$'.$key.'output .= "<a href=\'$file\'><img src=\'$max\' /></a> <br/>&raquo;&raquo; ".$this->'.$key.'." - ".$width."x".$height."px (resized)\n";');down();
           build('else');up();
           build('$'.$key.'output .= "<img src=\'$file\' /> <br/>&raquo;&raquo; ".$this->'.$key.'." - ".$width."x".$height."px\n";');down();
           build('$'.$key.'output .="</td>\n";');down();
           build('}');
           build('else');up();
           build('$'.$key.'output .= "<td class=\'error\'><strong>Error</strong> Not valid filename (".$this->'.$key.'.").</td>\n";');down();
           build('$'.$key.'output .= "\n";');
           break;
 
         case _OWNER:
         case _ID:
           if ($rule->db == UNDEFINED || $rule->what == UNDEFINED)
             build('$'.$key.'output = "<td class=\'left\'>'.$key.'</td> <td class=\'right\'> id ".$this->'.$key.'." </td></tr>";');
           else {
             if (!defined('MYM_MYSQL')) {
               build('$key = keyRead('.$rule->db.', '.$rule->what.', $this->'.$key.');');
               build('$'.$key.'output = "<td class=\'left\'>'.$rule->db.'</td>";');
               build('$'.$key.'output .= "<td class=\'right\'><a href=\'index.php?o='.$rule->db.'&id=".$this->'.$key.'."\'>$key</a> (id $this->'.$key.')"; </td></tr>');
             }
             else
               build('$'.$key.'output = "<td class=\'left\'>'.$key.'</td> <td class=\'right\'> id ".$this->'.$key.'." </td>";');
           }
           break;           
 
         case _LNG:  
           build('$'.$key.'output = "<td class=\'left\'>'.$key.'</td> <td class=\'right\'>".$this->'.$key.'." </td>";');
           break;
        
         case _FLAG:
           if ($rule->set != UNDEFINED)         
             $val = $this->db.$key.'set[$this->'.$key.']';
           else 
             $val = "Undefined.";           
        
           build('$'.$key.'output = "<td class=\'left\'>'.$key.'</td> <td class=\'right\'>".'.$val.'."</td>";');
           break;
 
         case _EMAIL:
         case _NUMBER:
         case _ONDB:
         case _OWNERIP:
         case _PRIV:
         case _ONID:
         case _LISTID:
         case _DATE:
         case _NOW:
           build('$'.$key.'output = "<td class=\'left\'>'.$key.'</td> <td class=\'right\'>".$this->'.$key.'." </td>";');
           break;             
       }
       
       if (($rule->readpriv) != false) {
         down(); build('}');     
       }       
     }
   }
   
   
   function buildMyMprocessprint($rules = NULL) {
     build('// MyMprocessprint()');
     build('function MyMprocessprint($link = false, $makelink = "makelink") {');up();
     buildtrace('trace(3, "'.$this->db.' > MyMprocessprint (link : $link, makelink : $makelink)");');
     nl();

     if ($key = $this->Field(_VIEWFIELD)) {
       $rule = $rules[$key];
       $this->buildBasicPrintItem($key, $rule);
       build('if ($link) return $makelink($'.$key.'output, "read", '.$this->db.', $this->id);');
	   build('else return $'.$key.'output;');
	 } nl();
     
     down();build('}');nl();
   }

function buildbasicprint($rules = NULL) {
     build('// basicprint()');
     build('function basicprint() {');up();
     nl();
              
     build('$priv = $this->getpriv();');nl();

     $arraykeys = array_keys($rules);
     for($i = 0; $i < count($arraykeys); $i++) {     
       $key = $arraykeys[$i];
       $rule = $rules[$key];

       $this->buildBasicPrintItem($key, $rule); 
     }
     
     nl();
     
     down();build('}');nl();
   }
   
   // buildInputForm()
   function buildInputForm($key = UNDEFINED, $rule = NULL) {

     if ($key == UNDEFINED)     
       tracedie("<p><strong>Error</strong> key $key undefined.</p>");
        
     if ($key != 'db' && $key != 'id') {
       $type = $rule->type;
             
       build('$readonly = "";');
       if ($rule->writepriv != false) {  // if you don't have write permissions, give a readonly input
         build('if ($priv < '.$rule->writepriv.')');up();
         build('$readonly = "class=\'readonly\' readonly";');down();
       }
       if ($rule->readpriv != false) { // check if you have read permissions before operating
         build('if ($priv >= '.$rule->readpriv.') {');up();       
       } 

      // build('MyMinclude("/core/MyMprocess.php");');

      $obligatory = "";
      $obligatory2 = "";
      if ($rule->obligatory) {
        $obligatory = "<strong>";
        $obligatory2 = "</strong>";
      }
  
      switch ($type) {
         
        case _TEXT:      
          build('if ($value == UNDEFINED) $value = "";');
         
          if ($rule->starred) $tt = "password";
          else $tt = "text";
          
          build('$'.$key.'form = "<td class=\'left\'>'.$obligatory.'".$txt["'.$key.'"]."'.$obligatory2.'</td> <td class=\'right\'> <input type=\''.$tt.'\' name=\''.$key.'\' value=\'".Unicode2Txt($value)."\' $readonly /></td>\n";');
          if ($rule->doubled) 
            build('$'.$key.'form .= "</tr><tr><td class=\'left\'>".$txt["typeagain"]."</td> <td class=\'right\'> <input type=\''.$tt.'\' name=\''.$key.'2\' value=\'".Unicode2Txt($value)."\' $readonly /></td>\n";');
          break;
           
        case _MYMTEXT:        
          build('if ($value == UNDEFINED) $value = "";');
          build('$'.$key.'form = "<td class=\'left\'>'.$obligatory.'".$txt["'.$key.'"]."'.$obligatory2.'</td> <td class=\'right\'> <textarea name=\''.$key.'\' $readonly cols=85 rows=15>".Unicode2Txt($value)."</textarea></td>\n";');
          break;
           
        case _LONGTEXT: 
          build('if ($value == UNDEFINED) $value = "";');
          build('$'.$key.'form = "<td class=\'left\'>'.$obligatory.'".$txt["'.$key.'"]."'.$obligatory2.'</td> <td class=\'right\'> <textarea name=\''.$key.'\' $readonly cols=85 rows=5>".Unicode2Txt($value)."</textarea></td>\n";');
          break;
   
        case _EMAIL:  
          build('if ($value == UNDEFINED) $value = "";');
          build('$'.$key.'form = "<td class=\'left\'>'.$obligatory.'".$txt["'.$key.'"]."'.$obligatory2.'</td> <td class=\'right\'> <input type=\'text\' name=\''.$key.'\' $readonly value=\'$value\' /></td>\n";');
          if ($rule->doubled) 
            build('$'.$key.'form .= "</tr><tr><td class=\'left\'>".$txt["typeagain"]."</td> <td class=\'right\'> <input type=\'text\' name=\''.$key.'2\' $readonly value=\'$value\' /></td>\n";');
          break;
         
        case _PRIV: 
        case _NUMBER:    
          build('if ($value == UNDEFINED) $value = "";');
          build('$'.$key.'form = "<td class=\'left\'>'.$obligatory.'".$txt["'.$key.'"]."'.$obligatory2.'</td> <td class=\'right\'> <input type=\'text\' name=\''.$key.'\' $readonly value=\'$value\' /></td>\n";');
          break;
           
        case _VIDEO:
        case _AUDIO:
        case _FILE:    
          build('$'.$key.'form = "";');
          build('if ($value != UNDEFINED && $value != "") {');up();
          build('$file = MYM_UPLOAD_REALPATH."/".$value;');
          build('if (!is_file($file))');up();
          build('$'.$key.'form = "<td class=\'left\'>".$txt["loadedfile"]."</td><td class=\'right\'><strong>".$txt["notvalidfilename"]."</strong></td></tr><tr>\n";');down();
          build('else { ');up();
          build('$'.$key.'form .= "<td class=\'left\'>".$txt["loadedfile"]."</td> ";');
          build('$'.$key.'form .= "<td class=\'right\'><strong>$value</strong></td>\n";');
          build('$'.$key.'form .= "</tr><tr><td class=\'left\'>".$txt["checktodelete"]."</td> <td class=\'right\'> <input type=\'checkbox\' name=\'del_'.$key.'\' value=\'yes\'></td></tr>\n";');
          build('$'.$key.'form .= "<input type=\'hidden\' name=\'oldfile_'.$key.'\' value=\'$value\' />\n";');down();          
          build('}');down();
          build('}');
          build('$'.$key.'form .= "<td class=\'left\'>'.$obligatory.'";');
          build('if ($value != UNDEFINED) $'.$key.'form .= $txt["new'.$key.'"]; else $'.$key.'form .= $txt["'.$key.'"]; ');
          build('$'.$key.'form .= "'.$obligatory2.'</td> <td class=\'right\'> <input type=\'file\' name=\'file_'.$key.'\' /></td> </tr>\n";');
          break;
   
        case _IMAGE:
          build('$'.$key.'form = "";');
          build('if ($value != UNDEFINED && $value != "") {');up();
          build('$file = MYM_RELATIVE_PATH.\'/\'.MYM_UPLOAD_PATH."/$value";');
          build('$thumb = MYM_RELATIVE_PATH.\'/\'.MYM_UPLOAD_PATH."/thumb_$value";');
          build('$max = MYM_RELATIVE_PATH.\'/\'.MYM_UPLOAD_PATH."/resized_$value";');                
          build('if (!is_file($file))');up();
          build('$'.$key.'form = "<td class=\'left\'>".$txt["loadedfile"]."</td><td class=\'right\'><strong>".$txt["notvalidfilename"]."</strong></td></tr><tr>\n";');down();
          build('else { '); up();
          build('list($width, $height) = getimagesize($file);');
          build('$'.$key.'form .= "<td class=\'left\'>".$txt["loadedfile"]."</td> ";');
          build('if (is_file($thumb))');up();
          build('$'.$key.'form .= "<a href=\'$file\'><img src=\'$thumb\' alt=\'".$key."\'/></a> <br/>&raquo;&raquo; ".$value." - ".$width."x".$height."px (<em>thumbnail</em>)\n";');down();
          build('else if (is_file($max))');up();
          build('$'.$key.'form .= "<a href=\'$file\'><img src=\'$max\' alt=\'".$key."\'/></a> <br/>&raquo;&raquo; ".$value." - ".$width."x".$height."px (<em>resized</em>)\n";');down();
          build('else');up();
          build('$'.$key.'form .= "<img src=\'$file\' alt=\'".$key."\' /> <br/>&raquo;&raquo; ".$value." - ".$width."x".$height."px \n";');down();nl();
          build('$'.$key.'form .="</td>";');
          
          build('$'.$key.'form .= "</tr><tr><td class=\'left\'>".$txt["checktodelete"]."</td>  <td class=\'right\'><input type=\'checkbox\' name=\'del_'.$key.'\' value=\'yes\'> </td>\n<tr>\n";');
          build('$'.$key.'form .= "<input type=\'hidden\' name=\'oldfile_'.$key.'\' value=\'$value\' />\n";');down();          
          build('} ');down();
          build('}');
          build('$'.$key.'form .= "<td class=\'left\'>'.$obligatory.'";');
          build('if ($value != UNDEFINED) $'.$key.'form .= $txt["new'.$key.'"]; else $'.$key.'form .= $txt["'.$key.'"];');
          build('$'.$key.'form .= "'.$obligatory2.'</td> <td class=\'right\'> <input type=\'file\' name=\'file_'.$key.'\' /> </td>\n";');
          break;
             
        case _LNG:  
          build('$'.$key.'form = "<td class=\'left\'>'.$obligatory.'".$txt["'.$key.'"]."'.$obligatory2.'</td> <td class=\'right\'> ";');
          build('if ($value == UNDEFINED) $value = session(\'lng\');');
          build('$'.$key.'form .= InputSelectOption(\''.$key.'\', $value, $GLOBALS["set_lng"],  $GLOBALS["set_lngcode"]);');
          build('$'.$key.'form .= "</td>\n";');
          break; 
   
        case _FLAG:      
          build('$'.$key.'form = "<td class=\'left\'>'.$obligatory.'".$txt["'.$key.'"]."'.$obligatory2.'</td> <td class=\'right\'> ";');
          build('$set = $GLOBALS["set_'.$key.'"];');
          build('$'.$key.'form .= InputSelectOption(\''.$key.'\', $value, $set);');
          build('$'.$key.'form .= "</td>\n";');
          break; 

        case _OWNER:       
        case _ID :        
          build('$'.$key.'form = "<td class=\'left\'>'.$obligatory.'".$txt["'.$key.'"]."'.$obligatory2.'</td>\n";');
          build('require_once(MYM_PATH_STRUCTURES."/'.$rule->db.'.php");');nl();

          build('$set = $values = NULL;'); nl();
          build('$elem = new '.$rule->db.'();'); 
          build('list($list, $n, $ntot) = $elem->MyMlist("'.$rule->where.'", "ID");');
          
          build('$'.$key.'form .= "<td class=\'right\'>";');
          build('if ($list != NULL) {');up();
          build('$found = false;');
          build('for ($i = 0; $i < $n; $i++) {');up();
          build('$id = $list[$i];');
          build('$elem->MyMread($id, "*");');
          build('$set[$i] = $elem->'.$rule->what.';');
          build('$values[$i] = $elem->id;');
          build('if ($value == $elem->id)');up();
          build('$found = true;');down();down();
          build('}');nl();
          
          build('if (!$found && $value != UNDEFINED) {');up();
          build('$set[] = $txt["..orphelined.."];');
          build('$values[] = $value;');down();
          build('}');          
          
          build('$'.$key.'form .= InputSelectOption(\''.$key.'\', $value, $set, $values, ($readonly != ""));');down();
          build('}');
          build('else $'.$key.'form .= "&nbsp;";');
          build('$'.$key.'form .= "</td>\n";');
          break; 
          
          /* build('$form = "<td class=\'left\'>'.$obligatory.$key.$obligatory2.'</td> ";');
          build('require_once(MYM_PATH_STRUCTURES."/'.$this->db.'.php");');
          
          build('$set = $values = NULL;');
          build('$elem = new '.$this->db.'();'); 
          build('list($list, $n, $tot) = $elem->MyMlist('.$rule->where.');');

          build('if ($list != NULL) {');
          build('$found = false;');
          build('while ($id = array_pop($list)) {');
          build('$elem->MyMread($id);');
          build('$set[] = $elem->'.$rule->what.';');
          build('$values[] = $elem->id;');
              
          build('if ($value == $elem->id)');
          build('$found = true;');
          build('}');
            
          build('if (!$found && $value != UNDEFINED) {');
          build('$set[] = "..orphelined..";');
          build('$values[] = $value;');
          build('}');
            
          build('$form .= "<td class=\'right\'>";');
          build('$form .= InputSelectOption($this->name, $value, $set, $values, ($readonly != ""));');
          build('$form .= "</td>\n";');
          build('}');     */

          break;         
                
        case _ONDB: 
          build('$set = $values = listfiles(MYM_PATH_STRUCTURES);');            
          
          build('$'.$key.'form = "<tr><td class=\'left\'>'.$obligatory.'".$txt["'.$key.'"]."'.$obligatory2.'</td>\n <td class=\'right\'>";');
          build('$'.$key.'form .= InputSelectOption(\''.$key.'\', $value, $set, $values, ($readonly != ""), "onChange=\'sendRequest(\"".MYM_RELATIVE_PATH."/core/dynamicSelect.php?db=\" + selectedvalue(\"".'.$key.'."\") + \"&what=\",handleRequest);\'");');
          build('$'.$key.'form .= "</td></tr>\n";');
          break;    
   
        case _ONID: 
          build('if ($value == UNDEFINED)');
          build('$value = "";');
   
          build('$'.$key.'form = "<tr><td class=\'left\'>'.$obligatory.'".$txt["'.$key.'"]."'.$obligatory2.'</td><td class=\'right\'> <input type=\'text\' name=\''.$key.'\' $readonly value=\'$value\' /></td></tr>\n";');
          break;
              
        case _LISTID: 
  
          build('if ($value == UNDEFINED) $value = post("list_".'.$key.');');
          build('$srcvalues = explode(", ", $value);');
              
          build('$'.$key.'form = "<td class=\'left\'>$obligatory".'.'".$txt["'.$key.'"]."'.'."$obligatory2</td>\n";');
        
          build('require_once(MYM_PATH_STRUCTURES."/'.$rule->db.'.php");');
                   
          build('$set = $values = NULL;');         
          
          build('$elem = new '.$rule->db.'();');
          build('list($list, $n, $tot) = $elem->MyMlist("'.$rule->where.'");');
                    
          build('if ($list != NULL) {');up();

          build('$srcset = NULL;');
          build('while ($id = array_pop($list)) {');up();

          build('$elem->MyMread($id);');
          build('$set[] = $elem->id." - ".$elem->$what;');
          build('$values[] = $elem->id;');
              
          build('for ($i = 0; $i < count($srcvalues); $i++) {');up();
          build('if ($elem->id == $srcvalues[$i]) {');up();
          build('$srcset[$i] = $elem->id." ".$elem->$what;');down();
          build('}');down();
          build('}');down();
          build('}');nl();
    
          build('if ($value != UNDEFINED) {');up();
          build('for ($i = 0; $i < count($srcvalues); $i++) {');up();
          build('if (!isset($srcset[$i])) {');up();
          build('$srcset[$i] = $elem->id." ".$txt["..orphelined.."];');down();
          build('}');down();
          build('}');down();
          build('}');nl();

          build('$listname = $this->name;');nl();
            
          build('$'.$key.'form .= "<td class=\'right\'>\n";');
          build('$'.$key.'form .= "  <table>\n";');
          build('$'.$key.'form .= "  <tr><td class=\'nestedside\'>\n";');
          build('$'.$key.'form .= InputSelectOption("src_".$listname, UNDEFINED, $set, $values, ($readonly != ""), "multiple size=10 onDblClick=\"copySelectedOptions(this.form[\'src_$listname\'],this.form[\'$listname\'],true)\"", false);');
          build('$'.$key.'form .= "  </td>\n\n";');nl();

          build('$'.$key.'form .= "  <td class=\'nestedcenter\'>\n";');
          build('$'.$key.'form .= "  <input class=\'littlebutton\' type=\'button\' name=\'right\' value=\'&raquo;\' onclick=\'copySelectedOptions(this.form[\"src_$listname\"],this.form[\"$listname\"],true)\'><br/>\n";');
          build('$'.$key.'form .= "  <input class=\'littlebutton\' type=\'button\' name=\'right\' value=\'All &raquo;\' onclick=\'copyAllOptions(this.form[\"src_$listname\"],this.form[\"$listname\"],true)\'><br/>\n";');
          build('$'.$key.'form .= "  <input class=\'littlebutton\' type=\'button\' name=\'left\' value=\'&laquo;\' onclick=\'removeSelectedOptions(this.form[\"$listname\"])\'><br/>\n";');
          build('$'.$key.'form .= "  <input class=\'littlebutton\' type=\'button\' name=\'left\' value=\'All &laquo;\' onclick=\'removeAllOptions(this.form[\"$listname\"])\'>\n";');
          build('$'.$key.'form .= "  </td>\n\n";');nl();
            
          build('$'.$key.'form .= "  <td class=\'nestedside\'>\n";');
          build('$'.$key.'form .= InputSelectOption($listname, UNDEFINED, $srcset, $srcvalues, ($readonly != ""), "multiple size=10 onDblClick=\"removeSelectedOptions(this.form[\'$listname\'])\"", false, true);');
          build('$'.$key.'form .= "  </td></tr>\n";');
          build('$'.$key.'form .= "  </table>\n";');
          build('$'.$key.'form .= "</td>\n\n";');nl();

          build('$'.$key.'form .= "<input type=\'hidden\' id=\'list_$listname\' name=\'list_$listname\' value=\'\'>\n";');
          build('} else $'.$key.'form .= "<td class=\'right\'> Associated database empty. </td>\n";');nl();

          break;
         
        case _OWNERIP: 
          build('$'.$key.'form = "<td class=\'left\'>'.$obligatory.'".$txt["'.$key.'"]."'.$obligatory2.'</td><td class=\'right\'> <input type=\'text\' name=\''.$key.'\' $readonly value=\'$value\' /></td>\n";');
          break;
           
        case _NOW:
          build('$value = date("d/m/Y, H:i");;');
        case _DATE:
          build('if ($value != UNDEFINED || $value == NULL) ');up();
          build('$value = "";');down();nl();
             
          build('$'.$key.'form = "<td class=\'left\'>'.$obligatory.'".$txt["'.$key.'"]."'.$obligatory2.'</td>"."<td class=\'right\'><input type=\'text\' name=\''.$key.'\' $readonly id=\'sel'.$key.'\' value=\'".$value."\'>";');
          build('if ($readonly == "") { ');up();
          build('$'.$key.'form .= "<input type=\'reset\' value=\'...\'";');
          build('$'.$key.'form .= " onclick=\"return showCalendar(\'sel'.$key.'\', \'%d/%m/%Y, %H:%M\', \'24\', true);\">";');down();
          build('}');         
          build('$'.$key.'form .= "</td>\n";');
          break;          
       }
       
       if ($rule->readpriv != false) { 
         down(); build('}');       
       } 
       
     }  
   }

   // MyMwrite
   function buildMyMwrite($rules = NULL, $fileaction = "index.php") {
   
     build('function MyMwrite($new = true, $read = true, $fileaction = "'.$fileaction.'") {');up();nl();
     buildtrace('trace(3, "'.$this->db.' > MyMwrite");');nl();
     
     build('global $txt;');nl();

     build('$priv = $this->getpriv();');nl();

     build('$checkpriv = $this->MyMcheckpriv(_WRITE);');
     build('if ($checkpriv == _NONE) {');up();
     build('print("<p>".$txt["notallowed"]."</p>"); ');
     build('return false;');down(); 
     build('}');nl();

     build('$nextaction = "write2";');
     build('if ($this->id != UNDEFINED) {'); up();
     build('if (!$new)'); up();
     build('$nextaction = "modify2";'); down();
     
     build('if ($read) {'); up();
     build('$this->MyMread(); '); 
     
     if ($this->Field(_OWNERFIELD)) {         
       $owner = $this->Field(_OWNERFIELD);
       build('if ($checkpriv == _OWN) {');up();
       build('if ($this->'.$owner.' != session(\''.$this->ownerdb().'_id\')) { ');up();
       build('print("<p>".$txt["notyours"]."</p>"); ');
       build('return false;');down();
       build('}');down();                                                                                 
       build('}');
     } down();
     build('}');down();
     build('}');nl();

     $arraykeys = array_keys($rules);     
     for($i = 0; $i < count($arraykeys); $i++) {
       $key = $arraykeys[$i];
       $rule = $rules[$key];
       if ($rule->type == _OWNER) 
         build('$this->'.$key.' = session(\''.$this->ownerdb().'_id\');');  
       else if ($rule->type == _OWNERIP)  
         build('$this->'.$key.' = $_SERVER["REMOTE_ADDR"];');
       
       build("// $key");
       build('$value = $this->'.$key.';');
       $this->buildInputForm($key, $rule);
       if ($i != count($arraykeys) - 1) nl();
       
     } nl();   

     build('print("<div id=\'table2col\'>\n");');
     build('print("<form name=\''.$this->db.'\' action=\'$fileaction\' method=\'post\' enctype=\'multipart/form-data\' onSubmit=\'return validation();\' onReset=\'return validation();\'>\n");');
     build('print("  <input type=\'hidden\' name=\'a\' value=\'".$nextaction."\' />\n");');
     build('print("  <input type=\'hidden\' name=\'o\' value=\''.$this->db.'\' />\n");');
     build('print("  <input type=\'hidden\' name=\'id\' value=\'".$this->id."\' />\n"); ');nl();

     build('print("  <table>\n");');nl();

     for($i = 0; $i < count($arraykeys); $i++) {     
       $key = $arraykeys[$i];
       $rule = $rules[$key];
       if ($rule->readpriv != false) {
         build('if ($priv >= '.$rule->readpriv.')');up();
       }        
       build('print("  <tr>\n    $'.$key.'form\n  </tr>\n");');
       if ($rule->readpriv != false) 
         down();
     } nl();

     // UM
     $userdb = $this->ownerdb();
     build('if (session("'.$userdb.'_id") == UNDEFINED) {'); up();
     build('print("  <tr><td class=\'left\'> &nbsp; </td> <td class=\'right\'> &nbsp; </td></tr>");');
     build('print("  <tr class=\'captcha\'><td class=\'left\'> <img src=\'".MYM_RELATIVE_PATH."/ext/phpcaptch/captchaImage.php\' alt=\'captcha image\'/> </td> <td class=\'right\'><p class=\'help\'>".$txt["captchainfo"]."</p> <input type=\'text\' id=\'captcha_input\' name=\'captcha_input\' size=\'15\' /></td></tr>");');down();
     build('}');

     build('print("  <tr><td class=\'left\'> &nbsp; </td> <td class=\'rightbutton\'>\n");');
     build('print("  <input class=\'firstbutton\' name=\'scratch_submit\' id=\'scratch_submit\' type=\'submit\' value=\'Save\' />\n");');
     build('print("  <input class=\'button\' type=\'reset\' value=\'Reset\' />\n");');
     build('print("  </td></tr>\n");');
     build('print("  </table>\n");');
     build('print("</form>\n");');
     build('print("</div>");');down();
     
     build('}');nl();
   }
   
   // MyMsetId
   function buildMyMsetId() {
     build('function MyMsetId($id = UNDEFINED) {');
     build('$this->id = $id;');
     build('}');nl();
   }

   // MyMset
   function buildMyMset() {   
     build('function MyMset($array) {');
     build('$arraykeys = array_keys($array);');
     build('for($i = 0; $i < count($arraykeys); $i++) {');
     build('$key = $arraykeys[$i];');
     build('if (isset($this->$key))');
     build('$this->$key = $array[$key];');  // WARNING TO BE ADD
     build('}');
     build('}');nl();
   }
   
   // MyMsetbypost
   function buildMyMsetbypost() {
   
     build('function MyMsetbypost() {');

     $object = get_object_vars($this);
     $arraykeys = array_keys($object);
     for($i = 0; $i < count($arraykeys); $i++) {
       $key = $arraykeys[$i];
       if ($key != 'db') { 
         build('if (isset($_POST[\''.$key.'\'])) ');
         build('$this->'.$key.' = $_POST[\''.$key.'\'];');
         build('else');
         build('$this->'.$key.' = UNDEFINED;');
       }           
     }
     build('}');nl();     
   }   
   
   // MyMget
   function buildMyMget() {
   
     build('function MyMget($force = false) {');
     build('$array = NULL;');nl();
     
     $object = get_object_vars($this);
     $arraykeys = array_keys($object);
     for($i = 0; $i < count($arraykeys); $i++) {
       $key = $arraykeys[$i];
       if ($key != 'db') {
         build('if ($this->'.$key.' != UNDEFINED || $force)');
         build('$array[\''.$key.'\'] = $this->'.$key.';');
       }         
     } nl();
     build('return $array;');
     build('}');nl();     
   }   

   // MyMrecord
   function buildMyMrecord($rules = NULL) {
   
     build('function MyMrecord() {');nl();
     build('global $nqueries;'); nl();

     build('$checkpriv = $this->MyMcheckpriv(_WRITE);');
     build('if ($checkpriv == _NONE) {');
     build('print("<p>Sorry, you are not allowed to do this.</p>"); ');
     build('return;');                  
     build('}');nl();                

     if (!method_exists($this, 'isDerivationOfField')) {
       build('if ($this->id == UNDEFINED)  {');nl();
     } else {
       $unid = $this->isDerivationOfField();
       build('if ($this->id != UNDEFINED && $this->'.$unid.' == UNDEFINED) {');
       build('$this->'.$unid.' = $this->id;');
       build('}');nl();
     }
       
     build('$array = $this->MyMget(true);');
     build('$arraykeys = array_keys($array);');nl();

     build('$keys = ""; $values = "";');
     build('for($i = 0; $i < count($arraykeys); $i++) {');
     build('$key = $arraykeys[$i];');nl();

     build('if ($key != "id") {');
     build('if ($keys != "") {');
     build('$keys .= ", ";');
     build('$values .= ", ";');
     build('}');
     build('$keys .= $key;');nl();
           
     build('switch ($key) {');nl();

     $object = get_object_vars($this);
     $arraykeys = array_keys($object);
     
     for($i = 0; $i < count($arraykeys); $i++) {     
       $key = $arraykeys[$i];
       if ($key != 'db' && $key != 'id') {
         $type = $rules[$key]->type;

         build('case \''.$key.'\' : ');       

         if ($rules[$key]->primary) {
           build('$query = "SELECT id FROM '.$this->db.'s WHERE ".$key." = \'".$array[$key]."\';";');
           build('$result = Query("'.$this->db.' > MyMrecord > Query for primary key", $query);');
           build('if ($result != NULL) {');
           build('print("<p>Sorry, a $key <strong>".$array[$key]."</strong> already exists in the database.</p>"); ');
           build('return false;');
           build('}');    
         }
         
         switch ($type) {
           case _VIDEO : 
           case _AUDIO :
           case _IMAGE : 
           case _FILE :    
             build('$file = files("file_".$key);');
             build('if ($file != NULL) {');
             build('if ($file[\'error\'] != 4) { ');
             build('MyMinclude("/core/upload.php");');
             build('if (doupload($file, $type)) {');
             build('$values .= "\'".strtolower(str_replace(" ", "", $file[\'name\']))."\'";');
             build('$array[$key] = strtolower(str_replace(" ", "", $file[\'name\']));');               
             build('}');
             build('else {');
             build('$values .=  "\'\'";');
             build('return false;');
             build('}');
             build('}');
             build('else');
             build('$values .=  "\'".$array[$key]."\'";');
             build('}');
             break;
             
           case _DATE :
             build('list($d, $mon, $y, $h, $min) = sscanf($array[$key], "%d/%d/%d, %d:%d");');
             build('$date = date("Y-m-d H:i:00", mktime($h, $min, 0, $mon, $d, $y));');
             build('$values .= "\'$date\'";');
             build('$array[$key] = $date;');               
             break;

           case _PRIV :
             build('$array[$key] = MYM_NEW_USER_PRIV;');
             build('$values .= "\'".MYM_NEW_USER_PRIV."\'";');
             break;
             
           case _NOW :
             build('$values .= "NOW()";');
             break;
             
           case _OWNER :
             build('$array[$key] = session(\''.$this->ownerdb().'_id\');');
             build('$values .= "\'".session(\''.$this->ownerdb().'_id\')."\'";');
             break;
             
           default :
             build('$values .= "\'".$array[$key]."\'";');
         }                       

         build('break;');nl();         
       }   
     } 
     build('}');    
     build('}');   
     build('}');nl();
     
     build('$insertion = "INSERT INTO '.$this->db.'s ($keys) VALUES ($values);";');
     build('$id = insertQuery("'.$this->db.' > MyMrecord", $insertion);');nl();
       
     build('if ($id == 0 || $id == NULL) ');
     build('return false;');
     build('else {');
     build('$this->id = $id;');     
     if (method_exists($this, 'isDerivationOfField')) {
       build('if ($this->'.$unid.' == UNDEFINED) {');
       build('$update = "UPDATE '.$this->db.'s SET '.$unid.' = \'$id\' where id = \'".$this->id."\';";');
       build('updateQuery("'.$this->db.' > MyMrecord", $update);');
       build('}');
     }
     build('return true;');     
     build('}');nl();
     
     // existing record
     if (!method_exists($this, 'isDerivationOfField')) {
       build('} else { ');nl();
     
       build('$array = $this->MyMget();');
       build('$arraykeys = array_keys($array);');nl();
         
       // build('$connection = connect("'.$this->db.' > MyMrecord");');nl();
       
       if (method_exists($this, 'ownerfield')) {
         build('$query = "SELECT '.$this->ownerfield().' FROM '.$this->db.'s WHERE id = ".$this->id;');
         build('$result = mysql_query($query); $nqueries++;');
         build('if (mysql_errno() > 0) tracedie("'.$this->db.' > MyMrecord > ERROR: Query uid for id ".$this->id." failed. <br/> $query <br/>". mysql_errno() . ": " . mysql_error(). "\n" . "<br />");');
         build('$row = mysql_fetch_row($result);');
         build('mysql_free_result($result);');
         build('$uid = $row[0];');nl();

         build('if ($checkpriv == _OWN && $uid != session(\''.$this->ownerdb().'_id\')) {');
         build('print("<p>Sorry, you are not allowed to do this - this is not an element of yours.</p>");');
         build('return false;');                                                                                  
         build('}');nl();
       }
       
       build('$attributions = "";');
       build('for($i = 0; $i < count($arraykeys); $i++) {');
       build('$key = $arraykeys[$i];');         
       build('if ($key != "id") {');nl();


       build('switch ($key) {');nl();

       $object = get_object_vars($this);
       $arraykeys = array_keys($object);
     
       for($i = 0; $i < count($arraykeys); $i++) {     
         $key = $arraykeys[$i];
         if ($key != 'db' && $key != 'id') {
           $type = $rules[$key]->type;
           build('case \''.$key.'\' : ');       

           if ($rules[$key]->primary) {
             build('$query = "SELECT id FROM '.$this->db.'s WHERE ".$key." = \'".$array[$key]."\';";');
             build('$result = Query("'.$this->db.' > MyMrecord > Query for primary key", $query);');
             build('if ($result != NULL) ');
             build('if ($result[0] != $this->id) {');
             build('print("<p>Sorry, a $key <strong>".$array[$key]."</strong> already exists in the database.</p>"); ');
             build('return false;');
             build('}');
           }

           switch ($type) {
             case _VIDEO : 
             case _AUDIO :
             case _IMAGE : 
             case _FILE : 
               build('$file = files("file_".$key);');
               build('if ($file != NULL) {');
               build('if ($file[\'error\'] != 4) {');
               build('MyMinclude("/core/upload.php");');
               build('if (doupload($file, $type))');
               build('$array[$key] = strtolower(str_replace(" ", "", $file[\'name\']));');
               build('else');
               build('return false;');
               build('}');
               build('}');
               break;
             
             case _DATE :
               build('list($d, $mon, $y, $h, $min) = sscanf($array[$key], "%d/%d/%d, %d:%d");');
               build('$date = date("Y-m-d H:i:00", mktime($h, $min, 0, $mon, $d, $y));');
               build('$array[$key] = $date;');            
               break;
               
             default: 
               break;
           }
           
           build('if ($attributions != "")');
           build('$attributions .= ", ";');
           build('$attributions .= $key. " = \'".$array[$key]."\'";');
           build('break;');nl();               
         }
       }

       build ('      }');
       build('}');   
       build('}');nl();

       build('$update = "UPDATE '.$this->db.'s SET $attributions WHERE id = \'".$this->id."\';";');
       build('$id = updateQuery("'.$this->db.' > MyMrecord", $update);');nl();

       build('return true;');
       build('}');
     }
     
     build('}');nl();  
   }
   
   // Delete the element
   function buildMyMdelete() {
   
     build('function MyMdelete() {');nl();
     
     build('if ($this->id == UNDEFINED)');
     build('return false;');nl();
     
     build('$checkpriv = $this->MyMcheckpriv(_DELETE);');nl();

     build('if ($checkpriv == _NONE) {');
     build('print("<p>Sorry, you are not allowed to do this.</p>");');
     build('return;');
     build('}');nl();

     build('$this->MyMread();');nl();

     if (method_exists($this, 'ownerField')) {         
       build('if ($checkpriv == _OWN) {');
       build('if ($this->'.$this->ownerfield().' != session(\''.$this->ownerdb().'_id\')) {');
       build('print("<p>Sorry, you are not allowed to do this - this is not a message of yours.</p>");');
       build('return false;');                                                                                  
       build('}');                                                                                         
       build('}');nl();
     }
     
     build('$query = "DELETE FROM '.$this->db.'s WHERE id = \'".$this->id."\';";');
     build('$result = deleteQuery("'.$this->db.' > MyMdelete", $query);');nl();
     
     build('return $result;');
     build('}');nl();
   
   }
   
   function buildPrecheckItem($rules = NULL) { 
     build('function precheckItem($key = UNDEFINED, $priv = UNDEFINED) {');nl();
     
     build('if ($priv == UNDEFINED)');               
     build('return false;');nl();
          
     $object = get_object_vars($this);
     $arraykeys = array_keys($object);

     build('$validation = "";');nl();
     
     build('switch($key) {');nl();
      
     for($i = 0; $i < count($arraykeys); $i++) {     
       $key = $arraykeys[$i];
       if ($key != 'id' && $key != 'db') {
         $type = $rules[$key]->type;

         build('case \''.$key.'\' : ');

         if ($rules[$key]->readpriv != false || $rules[$key]->writepriv != false) {
           build('if ($priv < '.$rules[$key]->readpriv.' || $priv < '.$rules[$key]->writepriv.')');
           build('return;');
         }   
  
         switch ($type) {
           case _TEXT:      
             if ($rules[$key]->doubled)
             build('$validation .= InputEquals(\''.$key.'\', \''.$key.'2\');');       
           
           case _MYMTEXT: 
           case _LONGTEXT: 
             if ($rules[$key]->minlength != UNDEFINED)
               build('$validation .= InputMinLength('.$rules[$key]->minlength.', \''.$key.'\');');
             if ($rules[$key]->maxlength != UNDEFINED)
               build('$validation .= InputMaxLength('.$rules[$key]->maxlength.', \''.$key.'\');');      
             if ($rules[$key]->obligatory)
               build('$validation .= InputNotNull(\''.$key.'\');');
             break;
     
           case _EMAIL:  
             build('$validation .= InputEmail(\''.$key.'\');');
             if ($rules[$key]->obligatory)
               build('$validation .= InputNotNull(\''.$key.'\');');
             if ($rules[$key]->doubled)
               build('$validation .= InputEquals(\''.$key.'\', \''.$key.'2\');');
             break;
             
           case _NUMBER: 
             build('$validation .= InputNumber(\''.$key.'\');');
             if ($rules[$key]->minvalue != UNDEFINED)
               build('$validation .= InputMinValue('.$rules[$key]->minvalue.', \''.$key.'\');');
             if ($rules[$key]->maxvalue != UNDEFINED)
               build('$validation .= InputMaxValue('.$rules[$key]->maxvalue.', \''.$key.'\');');
             if ($rules[$key]->minlength != UNDEFINED)
               build('$validation .= InputMinLength('.$rules[$key]->minlength.', \''.$key.'\');');
             if ($rules[$key]->maxlength != UNDEFINED)
               build('$validation .= InputMaxLength('.$rules[$key]->maxlength.', \''.$key.'\');');       
             if ($rules[$key]->obligatory)
               build('$validation .= InputNotNull(\''.$key.'\');');
             break;
     
           case _AUDIO:    
           case _VIDEO:
           case _FILE:    
           case _IMAGE:
             if ($rules[$key]->obligatory)      
               build('$validation .= InputNotNull(\'file_'.$key.'\');');
             break;
     
           case _PRIV:      
             if ($rules[$key]->obligatory)      
               build('$validation .= InputDefined(\''.$key.'\');');
             break;
     
           case _ONDB: 
           case _LNG:
           case _FLAG:    
           case _ONID:           
           case _ID:      
           case _OWNER:           
           case _OWNERIP:      
             if ($rules[$key]->obligatory)
               build('$validation .= InputDefined(\''.$key.'\');');
             break;
     
           case _NOW:     
           case _DATE:      
           case _LISTID:
             break;          
         }     
         
         build('break;');nl();         
         
       }       
     }
     build('}'); nl();        
     build('return $validation;');     
     build('}'); nl();        
   }   
   
   function buildMyMprecheck($rules = NULL) { 
     build('function MyMprecheck() {'); 
     build('require_once MYM_PATH."/core/baseJavascript.php";');nl();
     
     build('$priv = session(\''.$this->ownerdb().'_priv\', MYM_NOT_LOGGED_USER_PRIV);');nl();

     build('$validation = "\n<script language=\'javascript\' src=\'./core/string.js\' type=\'text/javascript\'></script>";');
     build('$validation .= "\n<script language=\'javascript\' type=\'text/javascript\'><!--\n"
                   ."function validation() {\n\n";');  
     build('$validation .= \'  $error = ""; \'."\n";'); nl();
     
     $array = $this->MyMget(true);
     $arraykeys = array_keys($array);
     for($i = 0; $i < count($arraykeys); $i++) {
       $key = $arraykeys[$i];
       if ($key != "id") {
         build('$validation .= '.$this->db.'::precheckItem("'.$key.'", $priv);');
       }
     } nl();

     build('$validation .= \'  if (!$error) return true; \'."\n";');
     build('$validation .= \'  else {alert($error); return false}\'."\n}\n--></script>\n";'); nl();
     
     build('print($validation);');
     build('}'); nl();
   }

   // MyMpostcheck
   function buildMyMpostcheck() {
     build('function MyMpostcheck() {');
     build('return true;');
     build('}');
   }
   
   /* 
   // -------------------------------------------
   //  Validation Management
   // -------------------------------------------
   // TO BE CORRECT : to be applied only on objects with val et valcode.

   // MyMformvalidate
   function MyMformvalidate($keyname = UNDEFINED, $fileaction = "index.php") {
   
     if ($keyname == UNDEFINED)
       return;
       
     print("<form action='$fileaction' method='POST'>\n\n");
     print("  <input type='hidden' name='a' value='validate2'>\n");
     print("  <input type='hidden' name='o' value='".$this->db."'>\n");
     print("  <ul>\n");
     print("    <li><span class='left'>$keyname</span><input style='background-color: yellow;' type='text' name='valkey' value='' /> </li>\n");
     print("    <li><span class='left'>Validation Code</span><input type='valcode' name='valcode' size=10 value='' /> </li>\n");
     print("  </ul>\n");
     print("  <input class='firstbutton' type='submit' value='Enter' />\n");
     print("</form>\n");
   }   
   
   // MyMvalidate
   // $itemkey is an univocal key that allows to recognise an element in the database
   // (it can be an ID, or a LOGIN name).
   // $valcode is the validation code.
   function MyMvalidate($keyname = UNDEFINED, $keyvalue = UNDEFINED, $valcode = UNDEFINED)
   {
     trace(1, $this->db." > MyMvalidate : keyname $keyname, keyvalue $keyvalue, valcode $valcode");     

     if ($keyname == UNDEFINED || $keyvalue == UNDEFINED || $valcode == UNDEFINED)
       return false;

     $query = "SELECT valcode, val FROM ".$this->db."s WHERE ".$keyname ." = '".$keyvalue."';";
     list($valcode2, $val) = query2(" ".$this->db." > MyMvalidate >", $query);
  
     if ($val == true) { // validation already done
       print("<p>This validation has been already done.</p>"); 
       print(makelink("login", UNDEFINED, "� Enter to your account!!"));
       print(" or ");
       print(makelink(UNDEFINED, UNDEFINED, "� Home"));  
     } else if ($valcode2 == $valcode) { // correct validation
       print("<p>Correct validation.</p>"); 
       
       $update = "UPDATE ".$this->db."s SET val = TRUE WHERE ".$keyname." = '".$keyvalue."';";
       updatequery("MyMvalidate",$update);
      
       print(makelink("login", UNDEFINED, "� Enter to your account!"));
       print(" or ");
       print(makelink(UNDEFINED, UNDEFINED, "� Home"));  
     } else {
       print("<p>Please enter again your $keyname and your Validation code.</p>");
       MyMformvalidate();
     } 
     
     trace(1, $this->db." < MyMvalidate end.");
     return true;
   } 
   
   // TO BE CORRECT: only for email defined users
   function MyMrecordOk()
   {
     print ("<p>Your profile has been recorded!! </p>");
     if (mail(
       $this->email, 
       "Welcome to MyM!", 
       "Hello,\n\n  we have successfully recorded your profile.\n\n"
      ."-------------------------------------------\n"
      ."Login: ".$this->name."\n"
      ."Password: ".$this->pass."\n"
      ."Validation Code: ".$this->valcode."\n"
      ."-------------------------------------------\n\n"
      ."Please validate your profile following this link: \n"
      .MYM_URI."/index.php?a=validuser&login=".$this->name."&valcode=".$this->pass."\n\n"
      ."or typing manually your Login and the Validation Code at the page: \n"
      .MYM_URI."/index.php?a=validuser\n\n"
      ."Thank you for your interest, \n"
      ."  MyM Staff\n\n",
       "From: ".MYM_ADMIN_EMAIL."\r\n"))  
       print("<p>An email has been sent to your email, follow the instructions written in it to validate your account. </p>");
     else 
       print("<p>Sorry, an internal error has stopped the validation process. Please <a href='mailto:".MYM_ADMIN_EMAIL."'>contact us</a>, writing your login <strong>".$this->name."</strong> to recover it.</p>");
   }
   
   */
}